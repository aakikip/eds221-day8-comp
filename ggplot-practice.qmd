---
title: "ggplot-practice"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Attaching packages

```{r}
library(tidyverse)
library(here)
library(janitor)
```

```{r}
#ggplot basics

# read in lizard data

lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

## the essentials

-   data
-   aesthetics -geometry

```{r}
#ggplot essentials, 3 ways

#first, the thing that stays consistent is X and y axis that comes from lizards data.(data and aesthetic stays consistent throughout plot)

ggplot(data = lizards,
       aes(x = total_length, y = weight)) + #(1 and 2)
  geom_point() #3


#second, the only thing that stays consistent is lizards data, other (data stays consistent throughout plot)

ggplot(dats = lizards) +
  geom_point(aes(x = total_length, y = weight))

#third
#nothing stays consistent
ggplot() +
  geom_point(data = lizards,
             aes(x = total_length, y = weight))

```

## Swap of geometries

```{r}
#bad example

ggplot(data = lizards,
       aes(x = total_length, y = weight)) + 
  geom_line() 
```

```{r}
#some geometry typles only need axis

ggplot(data = lizards,
       aes(x = total_length)) +
  geom_histogram()
```

```{r}
#jitterplots usually are best with one categorical and one continuous variable(characters in y axis, numbers in x)

ggplot(data = lizards,
       aes(x = weight, y = common_name)) + 
  geom_jitter()
```

## Aesthetic Mapping

#updating based on a constant value Don't need to use the `aes()` function

```{r}
ggplot(data = lizards,
       aes(x = weight)) +
  geom_histogram(color = "#8F8632",
                 fill = "#E7DC3A",
                 alpha = 0.5,
                 linetype = "dotted")

```

## Updating aesthetics based on variables

In thatcase we need to use the `aes()` function

```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name),
             alpha = 0.8)
```

## Themes

```{r}
ggplot(data = lizards,
       aes( x = weight, y = site)) +
  geom_jitter(aes(color = common_name)) +
  theme_minimal()
```

## Update axis labels

```{r}
ggplot(data = lizards,
       aes( x = weight, y = site)) +
  geom_jitter(aes(color = common_name)) +
  theme_minimal() +
  labs( x = "Weight (g)",
        y = "Study site",
        title = "Lizard weights across sites at Jornada",
        color = "Species")
```

```{r}
ggplot(data = lizards,
       aes( x = weight, y = site)) +
  geom_jitter(aes(color = common_name)) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5)) +
  labs( x = "Weight (g)",
        y = "Study site",
        title = "Lizard weights across sites at Jornada",
        color = "Species")
```

## Reorder data

```{r}
lizard_count <- lizards |>
  count(x = n, y= common_name, n)

ggplot(data = lizard_count,
       aes(x = n , y = fct_reorder(common_name, n))) +
  geom_col() +
  labs(x = "Lizard species",
       y = "Species common name")

```

## Advanced ggplot customization

```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_continuous(breaks = c(0, 250, 500),
                      limits = c(0, 500)) +
  scale_y_continuous(breaks = seq(from = 0,
                                  to = 70,
                                  by = 10),
                     limits = c(0, 70)) +
  labs(x = "Total length (mm)",
       y = "Weight (grams)") +
  theme_minimal()
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_log10()
```

```{r}
#counting up the number of lizards caught per day
lizard_counts <- lizards |>
  mutate(date = lubridate::mdy(date)) |>
  count(date)

ggplot(data = lizard_counts,
       aes(x = date, y = n)) +
  geom_line() +
  scale_x_date(breaks = scales::breaks_width("2 years"),
               labels = scales::label_date("%Y"))

```

## Customization of aesthetics with 'Scale' function

```{r}
#color gradient with just two colors

ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_gradient(low = "red", high = "navy")
```

```{r}
#color gradient with more than two colors

ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_gradientn(colors = c("orange", "red", "purple", "navy", "black"))

```

```{r}
#create a gradient of color bins
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_steps(low = "red", high = "navy", breaks = seq(0, 80, by = 5))
```

```{r}
library(paletteer)
```

```{r}
ggplot(data = lizards,
       aes(x = common_name, y = total_length)) +
  geom_boxplot(aes(fill = common_name),
               show.legend = FALSE) +
  coord_flip()
```

```{r}
#ordering species based on the median length

lizards_mean <- lizards |>
  mutate(common_name = fct_reorder(common_name,
                                   total_length, .fun = median))

ggplot(data = lizards_mean,
       aes(y = common_name, x = total_length)) +
  geom_boxplot(aes(fill = common_name), show.legend = FALSE) +
  scale_fill_paletteer_d(palette = "ggsci::default_gsea") +
  labs(x = "Total length (mm)",
       y = "Species") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank())
```

```{r}
library(patchwork)
```

```{r}


p1 <- ggplot(data = lizards_mean,
       aes(y = common_name, x = total_length)) +
  geom_boxplot(aes(fill = common_name), show.legend = FALSE) +
  scale_fill_paletteer_d(palette = "ggsci::default_gsea") +
  labs(x = "Total length (mm)",
       y = "Species") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank())

p2 <- ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_steps(low = "red", high = "navy", breaks = seq(0, 80, by = 5))
```

```{r}
#puts plots next to each other
(p1 | p2)

# "/" puts plots on top of each other
(p1 / p2 / p2 / p2) & theme_minimal()

# combinations of next to and on top of each other

p3 <- ((p1 | p2) / p2) & theme_minimal()

ggsave("test.png", p3)
```
